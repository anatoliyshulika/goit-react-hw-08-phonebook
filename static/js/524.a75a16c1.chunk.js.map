{"version":3,"file":"static/js/524.a75a16c1.chunk.js","mappings":"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","sources":["features/contacts/components/ContactForm/ContactForm.styled.jsx","features/contacts/components/ContactForm/ContactForm.jsx","features/contacts/components/ContactList/ContactList.styled.jsx","features/contacts/services/stringAvatar.js","features/contacts/components/ModalDelete/ModalDelete.jsx","features/contacts/components/ModalUpdate/ModalUpdate.jsx","features/contacts/components/Contact/Contact.jsx","features/contacts/components/ContactList/ContactList.jsx","pages/Contacts/Contacts.jsx"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const InputWrapper = styled.div`\n  display: flex;\n  flex-wrap: nowrap;\n`;\n","import React from 'react';\nimport { useFormik } from 'formik';\nimport * as yup from 'yup';\nimport 'yup-phone';\nimport { Box, Button, TextField } from '@mui/material';\nimport { InputWrapper } from './ContactForm.styled';\nimport { addContactOperation } from 'features/contacts/contacts.operations';\nimport { useDispatch } from 'react-redux';\n\nconst validationSchema = yup.object().shape({\n  name: yup.string().required(),\n  number: yup.string().phone().required(),\n});\n\nexport default function ContactForm() {\n  const dispatch = useDispatch();\n\n  const formik = useFormik({\n    initialValues: {\n      name: '',\n      number: '',\n    },\n    validationSchema: validationSchema,\n    onSubmit: (values, actions) => {\n      const contact = {\n        name: values.name,\n        number: values.number,\n      };\n      dispatch(addContactOperation(contact));\n      actions.resetForm();\n    },\n  });\n\n  return (\n    <div>\n      <form onSubmit={formik.handleSubmit}>\n        <InputWrapper>\n          <TextField\n            margin=\"dense\"\n            fullWidth\n            id=\"name\"\n            name=\"name\"\n            label=\"Name\"\n            value={formik.values.name}\n            onChange={formik.handleChange}\n            error={formik.touched.name && Boolean(formik.errors.name)}\n            helperText={formik.touched.name && formik.errors.name}\n          />\n          <Box width={10} />\n          <TextField\n            margin=\"dense\"\n            fullWidth\n            id=\"number\"\n            name=\"number\"\n            label=\"Number\"\n            value={formik.values.number}\n            onChange={formik.handleChange}\n            error={formik.touched.number && Boolean(formik.errors.number)}\n            helperText={formik.touched.number && formik.errors.number}\n          />\n        </InputWrapper>\n        <Button color=\"primary\" variant=\"contained\" fullWidth type=\"submit\">\n          Add contact\n        </Button>\n      </form>\n    </div>\n  );\n}\n","import styled from '@emotion/styled';\n\nexport const List = styled.ul`\n  list-style: none;\n  margin: 0;\n  padding: 0;\n  margin-top: 10px;\n`;\n","function stringToColor(string) {\n  let hash = 0;\n  let i;\n\n  /* eslint-disable no-bitwise */\n  for (i = 0; i < string.length; i += 1) {\n    hash = string.charCodeAt(i) + ((hash << 5) - hash);\n  }\n\n  let color = '#';\n\n  for (i = 0; i < 3; i += 1) {\n    const value = (hash >> (i * 8)) & 0xff;\n    color += `00${value.toString(16)}`.slice(-2);\n  }\n  /* eslint-enable no-bitwise */\n\n  return color;\n}\n\nexport default function stringAvatar(name) {\n  function getWordCount(str) {\n    return str.trim().split(/\\s+/).length;\n  }\n\n  if (+getWordCount(name) === 1) {\n    return {\n      sx: {\n        bgcolor: stringToColor(name),\n      },\n      children: `${name?.split(' ')[0][0]}`,\n    };\n  }\n  if (+getWordCount(name) > 1) {\n    return {\n      sx: {\n        bgcolor: stringToColor(name),\n      },\n      children: `${name?.split(' ')[0][0]}${name?.split(' ')[1][0]}`,\n    };\n  }\n}\n","import { Modal, Typography, ModalDialog } from '@mui/joy';\nimport WarningRounded from '@mui/icons-material/WarningRounded';\nimport { Box, Divider, Button } from '@mui/material';\nimport { deleteContactOperation } from 'features/contacts/contacts.operations';\nimport { useDispatch } from 'react-redux';\n\nexport default function ModalDelete({ open, setOpen, id }) {\n  const dispatch = useDispatch();\n\n  return (\n    <Modal open={open} onClose={() => setOpen(false)}>\n      <ModalDialog\n        variant=\"outlined\"\n        role=\"alertdialog\"\n        aria-labelledby=\"alert-dialog-modal-title\"\n        aria-describedby=\"alert-dialog-modal-description\"\n      >\n        <Typography\n          id=\"alert-dialog-modal-title\"\n          component=\"h2\"\n          startDecorator={<WarningRounded />}\n        >\n          Confirmation\n        </Typography>\n        <Divider />\n        <Typography\n          id=\"alert-dialog-modal-description\"\n          textColor=\"text.tertiary\"\n        >\n          Are you sure you want to delete a contact?\n        </Typography>\n        <Box\n          sx={{ display: 'flex', gap: 1, justifyContent: 'flex-end', pt: 2 }}\n        >\n          <Button\n            variant=\"outlined\"\n            color=\"secondary\"\n            onClick={() => setOpen(false)}\n          >\n            Cancel\n          </Button>\n          <Button\n            variant=\"contained\"\n            color=\"error\"\n            onClick={() => dispatch(deleteContactOperation(id))}\n          >\n            Delete\n          </Button>\n        </Box>\n      </ModalDialog>\n    </Modal>\n  );\n}\n","import * as React from 'react';\nimport Button from '@mui/material/Button';\nimport Dialog from '@mui/material/Dialog';\nimport Slide from '@mui/material/Slide';\nimport { useFormik } from 'formik';\nimport * as yup from 'yup';\nimport 'yup-phone';\nimport { useDispatch } from 'react-redux';\nimport { updateContactOperation } from 'features/contacts/contacts.operations';\nimport { TextField } from '@mui/material';\n\nconst Transition = React.forwardRef(function Transition(props, ref) {\n  return <Slide direction=\"up\" ref={ref} {...props} />;\n});\n\nconst validationSchema = yup.object().shape({\n  name: yup.string().required(),\n  number: yup.string().phone().required(),\n});\n\nexport default function ModalUpdate({ open, setOpen, id, name, number }) {\n  const dispatch = useDispatch();\n\n  const formik = useFormik({\n    initialValues: {\n      name: name,\n      number: number,\n    },\n    validationSchema: validationSchema,\n    onSubmit: (values, actions) => {\n      const contact = {\n        name: values.name,\n        number: values.number,\n      };\n      dispatch(updateContactOperation({ contactId: id, contact }));\n      actions.resetForm();\n    },\n  });\n\n  return (\n    <Dialog\n      fullWidth={true}\n      maxWidth=\"lg\"\n      open={open}\n      onClose={() => setOpen(false)}\n      TransitionComponent={Transition}\n    >\n      <form onSubmit={formik.handleSubmit}>\n        <TextField\n          margin=\"dense\"\n          fullWidth\n          id=\"name\"\n          name=\"name\"\n          label=\"Name\"\n          value={formik.values.name}\n          onChange={formik.handleChange}\n          error={formik.touched.name && Boolean(formik.errors.name)}\n          helperText={formik.touched.name && formik.errors.name}\n        />\n        <TextField\n          margin=\"dense\"\n          fullWidth\n          id=\"number\"\n          name=\"number\"\n          label=\"Number\"\n          value={formik.values.number}\n          onChange={formik.handleChange}\n          error={formik.touched.number && Boolean(formik.errors.number)}\n          helperText={formik.touched.number && formik.errors.number}\n        />\n        <Button\n          color=\"primary\"\n          variant=\"contained\"\n          fullWidth\n          type=\"submit\"\n          onClick={() => setOpen(false)}\n        >\n          Save changes\n        </Button>\n      </form>\n    </Dialog>\n  );\n}\n","import PropTypes from 'prop-types';\nimport {\n  Box,\n  ListItem,\n  IconButton,\n  ListItemAvatar,\n  Avatar,\n  ListItemText,\n} from '@mui/material';\nimport DeleteIcon from '@mui/icons-material/Delete';\nimport { Create } from '@mui/icons-material';\nimport stringAvatar from '../../services/stringAvatar';\nimport { useState } from 'react';\nimport ModalDelete from '../ModalDelete/ModalDelete';\nimport ModalUpdate from '../ModalUpdate/ModalUpdate';\n\nexport default function Contact({ contact }) {\n  const { id, name, number } = contact;\n  const [openModalDelete, setOpenModalDelete] = useState(false);\n  const [openModalUpdate, setOpenModalUpdate] = useState(false);\n\n  return (\n    <ListItem\n      secondaryAction={\n        <>\n          <IconButton\n            edge=\"end\"\n            aria-label=\"delete\"\n            onClick={() => setOpenModalUpdate(true)}\n          >\n            <Create />\n          </IconButton>\n          <Box display=\"inline-block\" width={15} />\n          <IconButton\n            edge=\"end\"\n            aria-label=\"update\"\n            onClick={() => setOpenModalDelete(true)}\n          >\n            <DeleteIcon />\n          </IconButton>\n        </>\n      }\n    >\n      <ListItemAvatar>\n        <Avatar {...stringAvatar(name)} />\n      </ListItemAvatar>\n      <ListItemText primary={name} secondary={number} />\n\n      <ModalDelete\n        open={openModalDelete}\n        setOpen={setOpenModalDelete}\n        id={id}\n      />\n      <ModalUpdate\n        open={openModalUpdate}\n        setOpen={setOpenModalUpdate}\n        id={id}\n        name={name}\n        number={number}\n      />\n    </ListItem>\n  );\n}\n\nContact.propTypes = {\n  contact: PropTypes.shape({\n    id: PropTypes.string.isRequired,\n    name: PropTypes.string.isRequired,\n    number: PropTypes.string.isRequired,\n  }).isRequired,\n};\n","import { List } from './ContactList.styled';\nimport Contact from '../Contact/Contact';\nimport { selectFilteredContacts } from 'app/selectors';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { fetchContactsOperation } from 'features/contacts/contacts.operations';\nimport { useEffect } from 'react';\n\nexport default function ContactList() {\n  const dispatch = useDispatch();\n  useEffect(() => {\n    dispatch(fetchContactsOperation());\n  }, [dispatch]);\n\n  const contacts = useSelector(selectFilteredContacts);\n\n  return (\n    <List>\n      {contacts?.map(contact => (\n        <Contact contact={contact} key={contact.id}></Contact>\n      ))}\n    </List>\n  );\n}\n","import { Container } from '@mui/material';\nimport ContactForm from 'features/contacts/components/ContactForm/ContactForm';\nimport ContactList from 'features/contacts/components/ContactList/ContactList';\n\nexport default function Contacts() {\n  return (\n    <Container\n      maxWidth=\"lg\"\n      sx={{\n        overflow: 'hidden',\n      }}\n    >\n      <ContactForm />\n      <ContactList />\n    </Container>\n  );\n}\n"],"names":["InputWrapper","styled","validationSchema","yup","shape","name","required","number","phone","ContactForm","dispatch","useDispatch","formik","useFormik","initialValues","onSubmit","values","actions","contact","addContactOperation","resetForm","handleSubmit","TextField","margin","fullWidth","id","label","value","onChange","handleChange","error","touched","Boolean","errors","helperText","Box","width","Button","color","variant","type","List","stringToColor","string","i","hash","length","charCodeAt","toString","slice","stringAvatar","getWordCount","str","trim","split","sx","bgcolor","children","ModalDelete","open","setOpen","Modal","onClose","ModalDialog","role","Typography","component","startDecorator","WarningRounded","Divider","textColor","display","gap","justifyContent","pt","onClick","deleteContactOperation","Transition","React","props","ref","Slide","direction","ModalUpdate","updateContactOperation","contactId","Dialog","maxWidth","TransitionComponent","Contact","useState","openModalDelete","setOpenModalDelete","openModalUpdate","setOpenModalUpdate","ListItem","secondaryAction","IconButton","edge","Create","Delete","ListItemAvatar","Avatar","ListItemText","primary","secondary","ContactList","useEffect","fetchContactsOperation","contacts","useSelector","selectFilteredContacts","map","Contacts","Container","overflow"],"sourceRoot":""}